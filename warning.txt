
----------------------------------------- analyze-image -----------------------------------------
$key="45256b4902f24462948fda7582f21d05"
$endpoint="https://service.cognitiveservices.azure.com/"


# Code to call Computer Vision service for image analysis
# $img_file = "store-camera-1.jpg"
# if ($args.count -gt 0 -And $args[0] -in ("store-camera-1.jpg", "store-camera-2.jpg", "store-camera-3.jpg", "store-camera-4.jpg"))
# {
#     $img_file = $args[0]
# }
#https://raw.githubusercontent.com/MicrosoftLearning/AI-900-AIFundamentals/main/data/vision/store-camera-1.jpg
$img = "https://raw.githubusercontent.com/MicrosoftLearning/AI-900-AIFundamentals/main/data/vision/advert.jpg"
#$img = "https://raw.githubusercontent.com/MicrosoftLearning/AI-900-AIFundamentals/main/data/vision/$img_file"

$headers = @{}
$headers.Add( "Ocp-Apim-Subscription-Key", $key )
$headers.Add( "Content-Type","application/json" )

$body = "{'url' : '$img'}"

write-host "Analyzing image..."
$result = Invoke-RestMethod -Method Post `
          -Uri "$endpoint/vision/v3.2/analyze?visualFeatures=Categories,Description,Objects" `
          -Headers $headers `
          -Body $body | ConvertTo-Json -Depth 5

$analysis = $result | ConvertFrom-Json
Write-Host("`nDescription:")
foreach ($caption in $analysis.description.captions)
{
    Write-Host ($caption.text)
}

Write-Host("`nObjects in this image:")
foreach ($object in $analysis.objects)
{
    Write-Host (" -", $object.object)
}

Write-Host("`nTags relevant to this image:")
foreach ($tag in $analysis.description.tags)
{
    Write-Host (" -", $tag)
}

Write-Host("`n")

-------------------------------- analyze-image.ps1 --------------------------------------

$key="45256b4902f24462948fda7582f21d05"
$endpoint="https://service.cognitiveservices.azure.com/"

# Code to call Text Analytics service to analyze sentiment in text
$txt_file = "review1.txt"
if ($args.count -gt 0 -And $args[0] -in ("review1.txt", "review2.txt", "review3.txt", "review4.txt"))
{
    $txt_file = $args[0]
}
$url = "https://raw.githubusercontent.com/MicrosoftLearning/AI-900-AIFundamentals/main/data/text/reviews/$txt_file"

$txt =  (Invoke-webrequest -URI $url).Content

$headers = @{}
$headers.Add( "Ocp-Apim-Subscription-Key", $key )
$headers.Add( "Content-Type","application/json" )

# Language Detection

$data = @{
    'documents' = @(
        @{
            "id" = "1"
            "text" = "$txt"
        }
    )
} | ConvertTo-Json

Write-Host("***Detecting Language***")
$result = Invoke-RestMethod -Method Post `
          -Uri "$endpoint/text/analytics/v3.1/languages" `
          -Headers $headers `
          -Body $data | ConvertTo-Json -Depth 6

$analysis = ($result | ConvertFrom-Json)
$langName = $analysis.documents.detectedLanguage.name
$langCode = $analysis.documents.detectedLanguage.iso6391Name
$langScore = $analysis.documents.detectedLanguage.confidenceScore

Write-Host ("  - Language: $langName`n  - Code: $langCode`n  - Score: $langScore")

# Key Phrases

$data = @{
    'documents' = @(
        @{
            "id" = "1"
            "text" = "$txt"
        }
    )
} | ConvertTo-Json

write-host "`n`n***Finding Key Phrases***"
$result = Invoke-RestMethod -Method Post `
          -Uri "$endpoint/text/analytics/v3.1/keyPhrases" `
          -Headers $headers `
          -Body $data | ConvertTo-Json -Depth 6

$analysis = ($result | ConvertFrom-Json)

$keyPhrases = $analysis.documents.keyPhrases

Write-Host "  - Key Phrases: "
foreach($keyPhrase in $keyPhrases) {
    Write-Host ("    ", $keyPhrase)
}

# Sentiment

$data = @{
    'documents' = @(
        @{
            "id" = "1"
            "text" = "$txt"
        }
    )
} | ConvertTo-Json

write-host "`n`n***Analyzing Sentiment***"
$result = Invoke-RestMethod -Method Post `
          -Uri "$endpoint/text/analytics/v3.1/sentiment" `
          -Headers $headers `
          -Body $data | ConvertTo-Json -Depth 6

$analysis = ($result | ConvertFrom-Json)

$sentiment = $analysis.documents.sentiment
$positive = $analysis.documents.confidenceScores.positive
$neutral = $analysis.documents.confidenceScores.neutral
$negative = $analysis.documents.confidenceScores.negative

Write-Host ("  - A $sentiment sentiment based on these scores:`n    - Positive: $positive`n    - Neutral: $neutral`n    - Negative: $negative")

# Known Entities

$data = @{
    'documents' = @(
        @{
            "id" = "1"
            "text" = "$txt"
        }
    )
} | ConvertTo-Json

write-host "`n`n***Identifying known entities***"
$result = Invoke-RestMethod -Method Post `
          -Uri "$endpoint/text/analytics/v3.1/entities/linking" `
          -Headers $headers `
          -Body $data | ConvertTo-Json -Depth 6

$analysis = ($result | ConvertFrom-Json)

$entities = $analysis.documents[0].entities

foreach ($entity in $entities) {
    $entityName = $entity.name 
    $entityUrl = $entity.url 
    Write-Host ("  - $entityName : $entityUrl")
}

-------------------------------------- clasify-image ---------------------------------------------
$predictionUrl="https://pruebamiprimeraia.cognitiveservices.azure.com/customvision/v3.0/Prediction/490dd866-9213-409a-9a65-5783a53a54d9/classify/iterations/version1/url"
$predictionKey = "fd47efc1dd2243f485bae2aba0abf4c4"


# Code to call Custom Vision service for image classification

$img_num = 1
if ($args.count -gt 0 -And $args[0] -in (1..3))
{
    $img_num = $args[0]
}

$img = "https://raw.githubusercontent.com/MicrosoftLearning/AI-900-AIFundamentals/main/data/vision/animals/animal-$($img_num).jpg"

$headers = @{}
$headers.Add( "Prediction-Key", $predictionKey )
$headers.Add( "Content-Type","application/json" )

$body = "{'url' : '$img'}"

write-host "Analyzing image..."
$result = Invoke-RestMethod -Method Post `
          -Uri $predictionUrl `
          -Headers $headers `
          -Body $body | ConvertTo-Json -Depth 5

$prediction = $result | ConvertFrom-Json

Write-Host ("`n",$prediction.predictions[0].tagName, "`n")

-------------------------------------- deteccion-anomalies --------------------------------------
$key="YOUR_KEY"
$endpoint="YOUR_ENDPOINT"


# Code to call Anomaly Detector
write-host "Analyzing data..."
$data = "./data/anomaly/data.json"
$json = (Get-Content $data -Raw) | ConvertFrom-Json
$headers = @{}
$headers.Add( "Ocp-Apim-Subscription-Key", $key )
$headers.Add( "Content-Type","application/json" )
$result = Invoke-RestMethod -Method Post `
          -Uri $endpoint/anomalydetector/v1.0/timeseries/entire/detect `
          -Headers $headers `
          -InFile $data

# Process results
for ($i = 0 ; $i -lt $result.expectedValues.count ; $i++){
    $c = "white"
    if ($result.isAnomaly[$i] -eq "True"){
        $c = "red"
    }
    Write-Host $json.series[$i].timestamp, $json.series[$i].value, $result.isAnomaly[$i] -ForegroundColor $c
}

------------------------------------ detect-objects --------------------------------------------------
$predictionUrl="YOUR_PREDICTION_URL"
$predictionKey = "YOUR_PREDITION_KEY"


# Code to call Custom Vision service for object detection
$img_num = 1
if ($args.count -gt 0 -And $args[0] -in (1..2))
{
    $img_num = $args[0]
}

$img = "https://github.com/MicrosoftLearning/AI-900-AIFundamentals/raw/main/data/vision/road-safety/road-safety-$($img_num).jpg"

$headers = @{}
$headers.Add( "Prediction-Key", $predictionKey )
$headers.Add( "Content-Type","application/json" )

$body = "{'url' : '$img'}"

write-host( "Analyzing image...", "`n")
$result = Invoke-RestMethod -Method Post `
          -Uri $predictionUrl `
          -Headers $headers `
          -Body $body | ConvertTo-Json -Depth 5

$prediction = $result | ConvertFrom-Json

$items = $prediction.predictions

foreach ($item in $items) 
{if ($item.probability -gt .9)
{
    Write-Host ($item.tagName + " (" + $item.probability + "%)")
    Write-Host ($item.boundingBox, "`n")
}
}

----------------------------------- face ----------------------------------------------
$key="YOUR_KEY"
$endpoint="YOUR_ENDPOINT"



# Code to call Face service for face detection
$img_file = "store-camera-1.jpg"
if ($args.count -gt 0 -And $args[0] -in ("store-camera-1.jpg", "store-camera-2.jpg", "store-camera-3.jpg"))
{
    $img_file = $args[0]
}

$img = "https://raw.githubusercontent.com/MicrosoftLearning/AI-900-AIFundamentals/main/data/vision/$img_file"

$headers = @{}
$headers.Add( "Ocp-Apim-Subscription-Key", $key )
$headers.Add( "Content-Type","application/json" )

$body = "{'url' : '$img'}"

write-host "Analyzing image...`n"
$result = Invoke-RestMethod -Method Post `
          -Uri "$endpoint/face/v1.0/detect?detectionModel=detection_01" `
          -Headers $headers `
          -Body $body | ConvertTo-Json -Depth 5

$analysis = ($result | ConvertFrom-Json)
Write-Host ("`nFrom June 21st 2022, Face service capabilities that return personally identifiable features are restricted.`nSee https://azure.microsoft.com/blog/responsible-ai-investments-and-safeguards-for-facial-recognition/ for details.`nThis code is restricted to returning the location of any faces detected:`n")
foreach ($face in $analysis)
{
    Write-Host("Face location: $($face.faceRectangle)`n")
}

------------------------------------------ form-recognizer -----------------------------------------
$key="YOUR_KEY"
$endpoint="YOUR_ENDPOINT"

# Create the URL where the raw receipt image can be found
$img = "https://raw.githubusercontent.com/MicrosoftLearning/AI-900-AIFundamentals/main/data/vision/receipt.jpg"

# Create the header for the REST POST with the subscription key
# In this example, the URL of the image will be sent instead of 
# the raw image, so the Content-Type is JSON
$headers = @{}
$headers.Add( "Ocp-Apim-Subscription-Key", $key )
$headers.Add( "Content-Type","application/json" )

# Create the body with the URL of the raw image
$body = "{'source': '$img'}"

# Call the receipt analyze method with the header and body
# Must call the Invoke-WebRequest to have acces to the header
Write-Host "Sending receipt..."
$response = Invoke-WebRequest -Method Post `
          -Uri "$endpoint/formrecognizer/v2.1/prebuilt/receipt/analyze" `
          -Headers $headers `
          -Body $body
Write-Host "...Receipt sent."

# Extract the URL from the response of the receipt anaylzer 
# to call the API to getting the analysis results
$resultUrl = $($response.Headers['Operation-Location'])

# Create the header for the REST GET with only the subscription key
$resultHeaders = @{}
$resultHeaders.Add( "Ocp-Apim-Subscription-Key", $key )

# Get the receipt analysis results, passing in the resultURL
# Continue to request results until the analysis is "succeeded"
Write-Host "Getting results..."
Do {
    $result = Invoke-RestMethod -Method Get `
            -Uri $resultUrl `
            -Headers $resultHeaders | ConvertTo-Json -Depth 10

    $analysis = ($result | ConvertFrom-Json)
} while ($analysis.status -ne "succeeded")
Write-Host "...Done`n"

# Access the relevant fields from the analysis 
$analysisFields = $analysis.analyzeResult.documentResults.fields

# Print out all of the properties of the receipt analysis
Write-Host ("Receipt Type: ", $($analysisFields.ReceiptType.valueString))
Write-Host ("Merchant Address: ", $($analysisFields.MerchantAddress.text))
Write-Host ("Merchant Phone: ", $($analysisFields.MerchantPhoneNumber.text))
Write-Host ("Transaction Date: ", $($analysisFields.TransactionDate.valueDate))
Write-Host ("Receipt Items: ")

# Access the individual items from the analysis
$receiptItems = $($analysisFields.Items.valueArray)

for (($idx = 0); $idx -lt $receiptItems.Length; $idx++) {
    $item = $receiptItems[$idx] 
    Write-Host ("Item #", ($idx+1))
    Write-Host ("  - Name: ", $($item.valueObject.Name.valueString))
    Write-Host ("  - Price: ",$($item.valueObject.TotalPrice.valueNumber))
}

Write-Host ("Subtotal: ", $($analysisFields.Subtotal.text))
Write-Host ("Tax: ", $($analysisFields.Tax.text))
Write-Host ("Total: ", $($analysisFields.Total.text))

---------------------------------------------------- speaking-clock ---------------------------------------
$key="c0abc37f0f8648d2b5a32320f2e06c38"
$region="eastus"


# Code to call Speech to Text API
$wav = "./data/speech/time.wav"

$headers = @{}
$headers.Add( "Ocp-Apim-Subscription-Key", $key )
$headers.Add( "Content-Type","audio/wav" )


write-host "Analyzing audio..."
$result = Invoke-RestMethod -Method Post `
          -Uri "https://$region.stt.speech.microsoft.com/speech/recognition/conversation/cognitiveservices/v1?language=en-US" `
          -Headers $headers `
          -InFile $wav

$analysis = $result
Write-Host ("`nYou said '$($analysis.DisplayText)'")

if ($analysis.DisplayText -eq "What time is it?"){
    # Code to call Text to Speech API
    $sml = "<speak version='1.0' xml:lang='en-US'>
    <voice xml:lang='en-US' xml:gender='Female' name='en-US-AriaNeural'>
        It's coding time!
    </voice>
    </speak>"

    $headers = @{}
    $headers.Add( "Ocp-Apim-Subscription-Key", $key )
    $headers.Add( "Content-Type","application/ssml+xml" )
    $headers.Add( "X-Microsoft-OutputFormat","audio-16khz-128kbitrate-mono-mp3" )

    $outputFile = "output.wav"

    write-host "Synthesizing speech..."
    $result = Invoke-RestMethod -Method Post `
        -Uri "https://$region.tts.speech.microsoft.com/cognitiveservices/v1" `
        -Headers $headers `
        -Body $sml `
        -OutFile $outputFile

    write-host $result
    write-host "Response saved in $outputFile `n"

}

-------------------------------- traductor ------------------------------------
#Add your key here
$key="45256b4902f24462948fda7582f21d05"

#You need to add your resource location if you use a Cognitive Services resource
$location="eastus"

#The endpoint is global for the Translator service, DO NOT change it 
$endpoint="https://api.cognitive.microsofttranslator.com/"

#Text to be translated 
$text="Hola"

# Code to call Text Analytics service to analyze sentiment in text
$headers = @{}
$headers.Add( "Ocp-Apim-Subscription-Key", $key )
$headers.Add( "Ocp-Apim-Subscription-Region", $location )
$headers.Add( "Content-Type","application/json" )

$body = "[{'text': '$text'}]" 

write-host "Translating text..."
$result = Invoke-Webrequest -Method Post `
          -Uri "$endpoint/translate?api-version=3.0&from=es&to=fr&to=it&to=zh-Hans" `
          -Headers $headers `
          -Body $body 

$analysis = $result.content | ConvertFrom-Json
$french = $analysis.translations[0] 
$italian = $analysis.translations[1] 
$chinese = $analysis.translations[2] 
Write-Host ("Original Text: $text`nFrench Translation: $($french.text)`nItalian Translation: $($italian.text)`nChinese Translation: $($chinese.text)`n")

# # Code to Translate audio to text in another language 
# $wav = "./data/translation/english.wav"

# $headers = @{}
# $headers.Add( "Ocp-Apim-Subscription-Key", $key )
# $headers.Add( "Content-Type","audio/wav" )

# write-host "Translating audio..."
# $audio_result = Invoke-RestMethod -Method Post `
#           -Uri "https://$location.stt.speech.microsoft.com/speech/recognition/conversation/cognitiveservices/v1?language=en-US" `
#           -Headers $headers `
#           -InFile $wav

# $original_audio_text = $audio_result.DisplayText
# Write-Host ("The audio said '$($original_audio_text)'")

# Code to call translate audio text to different language 
# $headers = @{}
# $headers.Add( "Ocp-Apim-Subscription-Key", $key )
# $headers.Add( "Ocp-Apim-Subscription-Region", $location )
# $headers.Add( "Content-Type","application/json" )

# $body = "[{'text': '$original_audio_text'}]" 

# write-host "Translating text from audio to French..."
# $result = Invoke-Webrequest -Method Post `
#           -Uri "$endpoint/translate?api-version=3.0&from=en&to=fr" `
#           -Headers $headers `
#           -Body $body 

# $analysis = $result.content | ConvertFrom-Json
# $french_translation = $analysis.translations.text
# Write-host ("Translated text: '$french_translation'")


 -------------------------------------- understand -------------------------------------
$endpointUrl="YOUR_ENDPOINT"
$key = "YOUR_KEY"
$projectName = "YOUR_PROJECT_NAME"
$deploymentName = "YOUR_DEPLOYMENT_NAME"


if ($args.count -gt 0){
    # Get the user input
    $utterance = $args[0].ToString()

   # Code to call Language service for intent prediction
    $headers = @{}
    $headers.Add( "Ocp-Apim-Subscription-Key", $key)
    $headers.Add( "Content-Type","application/json")

    $item = [ordered]@{}
    $item.Add( "id", "1")
    $item.Add( "participantId", "1")
    $item.Add( "text", $utterance)
    $input = @{}
    $input.Add( "conversationItem", $item)
    
    $parameters = [ordered]@{}
    $parameters.Add( "projectName", $projectName)
    $parameters.Add( "deploymentName", $deploymentName)
    $parameters.Add( "stringIndexType", "TextElement_V8")

    $body = @{}
    $body.Add( "kind", "Conversation")
    $body.Add( "analysisInput", $input)
    $body.Add( "parameters", $parameters)
   
    $body = $body | ConvertTo-Json
    
    Write-Host "Calling Language model..."
    $response = Invoke-WebRequest -Method Post `
           -Uri $endpointUrl `
           -Headers $headers `
           -Body $body

    $result = $response | ConvertFrom-Json

    $predictedIntent = $result.result.prediction.topIntent
    $predictedDevice = $result.result.prediction.entities[0].text
    Write-Host("Predicted intent: $predictedIntent")
    Write-Host("Predicted device: $predictedDevice")

    # Now perform the appropriate action if the request was understood
    if ($predictedIntent -in ("switch_on", "switch_off")){
        if($predictedDevice -like ("*light*") -or ("*fan*")){
            if($predictedIntent -eq "switch_on"){
                Write-Host("The $predictedDevice is on.")
            }
            else {
                Write-Host("The $predictedDevice is off.")
            }
        }
        else{
            Write-Host("Sorry, I can't do that.")
        }
    }
}
else {
    Write-Host("Sorry, I can't do that.")
}
Write-Host "`n"


------------------------------------ app azure -----------------------------------
// Logica para el detector de caras
const drawButton = document.getElementById('drawButton');
const image = document.getElementById('image');
const line = document.getElementById('line');
const leftInput = document.getElementById('left');
const topInput = document.getElementById('top');
const widthInput = document.getElementById('width');
const heightInput = document.getElementById('height');
const imageUrlInput = document.getElementById('imageUrl');
const deleteUrl = document.getElementById('deleteUrl');
const container_marcas = document.getElementById('marcar_caras');

//Cuando le de click al boton start
drawButton.addEventListener('click', () => {
    const left = parseInt(leftInput.value);
    const top = parseInt(topInput.value);
    const width = parseInt(widthInput.value);
    const height = parseInt(heightInput.value);
    let img = imageUrlInput.value;
    getDeteccion(img);
});
//Cuando le de click al boton X
deleteUrl.addEventListener('click',() =>{
    imageUrlInput.value = '';
    image.src = imageUrlInput;
    deleteMarcas(container_marcas);
});
//Cuando ingrese la URL de la imagen cargue de una vez la imagen
imageUrlInput.addEventListener('input', () => {
    image.src = imageUrlInput.value;
    if (imageUrlInput.value == '') {
        deleteMarcas(container_marcas);
    }
});
//Funcion para quitar las marcas de la caras detectadas
function deleteMarcas(element) {
    while (element.firstChild) {
        element.removeChild(element.firstChild);
    }
}
//Funcion para consumir el API del recurso
function getDeteccion(img) {
    const key = "c6a14306daad4cd2a91b18d3dafb0149";
    const endpoint = "https://face-recognitionv1.cognitiveservices.azure.com/";

    const headers = {
        "Ocp-Apim-Subscription-Key": key,
        "Content-Type": "application/json"
    };

    const body = JSON.stringify({ url: img });

    console.log("Analyzing image...\n");

    fetch(`${endpoint}/face/v1.0/detect?detectionModel=detection_01`, {
        method: 'POST',
        headers: headers,
        body: body
    })
        .then(response => response.json())
        .then(result => {
            const analysis = result;
            console.log(result);
            analysis.forEach(face => {
                console.log(`Face location: ${JSON.stringify(face.faceRectangle)}\n`);
                let newDiv = document.createElement('div');
                newDiv.classList.add('position-absolute');
                newDiv.style.left = `${(face.faceRectangle.left / image.naturalWidth) * 50}%`;
                newDiv.style.top = `${(face.faceRectangle.top / image.naturalHeight) * 100}%`;
                newDiv.style.width = `${(face.faceRectangle.width / image.naturalWidth) * 50}%`;
                newDiv.style.height = `${(face.faceRectangle.height / image.naturalHeight) * 100}%`;
                newDiv.style.border = "2px solid red";
                container_marcas.appendChild(newDiv);
            });
        })
        .catch(error => console.error('Error:', error));
}


// Logica para el traductor
const text = document.getElementById('texto_user');
const resultado = document.getElementById('result');
const cambioIdioma = document.getElementById('cambioIdioma');
const etq_español = document.getElementById('es');
const etq_ingles = document.getElementById('en');
let count = 1;
let es = 'es';
let en = 'en';

text.addEventListener('input',() =>{
    console.log("traduciendo.....");
    let texto = text.value;
    if (text.value == '') {
        console.log("ingresa lo que deseas traducir");
        resultado.textContent = '';
    }else{
        if (count % 2 == 0) {
            ( async () => {
                const traduccion = await traslator(en,es,texto);
                resultado.textContent = traduccion;
            })();
        }else{
            ( async () => {
                const traduccion = await traslator(es,en,texto);
                resultado.textContent = traduccion;
            })();
        }
    }
})

cambioIdioma.addEventListener('click',() => {
    count += 1;
    let contentEnglis = resultado.value;
    let contentSpanish = text.value;
    if (count % 2 == 0) {
        etq_español.textContent = "Ingles";
        etq_ingles.textContent = "Español";
        resultado.textContent = contentSpanish;
        text.value = contentEnglis;
    }else{
        etq_español.textContent = "Español";
        etq_ingles.textContent = "Ingles";
        resultado.textContent = contentSpanish;
        text.value = contentEnglis;
    }
    console.log("cambio de idioma");
})

async function traslator(from,to,texto) {
    const key = '45256b4902f24462948fda7582f21d05';
    const location = 'eastus';
    const endpoint = 'https://api.cognitive.microsofttranslator.com/';
    const headers = {
        "Ocp-Apim-Subscription-Key" : key,
        "Ocp-Apim-Subscription-Region" : location,
        "Content-Type" : "application/json"
    };
    const body = JSON.stringify([{
        'text' : texto
    }]);

    try {
        const response = await fetch(`${endpoint}translate?api-version=3.0&from=${from}&to=fr&to=${to}&to=zh-Hans`, {
            method: 'POST',
            headers: headers,
            body: body
        });
        
        const result = await response.json();
        const respuesta = result[0].translations[1].text;
        return respuesta;
    } catch (error) {
        console.log(error);
    }
}


//logica para el analisis de imagenes
const etqImg = document.getElementById('imageAnalisis');
const imgUrlAnalisis = document.getElementById('imageUrlAnalisis');
const deleteUrlAnalisis = document.getElementById('deleteUrlAnalisis');
const botonAnalisis = document.getElementById('botonAnalisis');
const description = document.getElementById('description');
const objects = document.getElementById('objects');
const ul = document.getElementById('listaObjects');

imgUrlAnalisis.addEventListener('input', () => {
    etqImg.src = imgUrlAnalisis.value; 
});

deleteUrlAnalisis.addEventListener('click',() => {
    imgUrlAnalisis.value = '';
    etqImg.src = imgUrlAnalisis;
    description.textContent = 'Descripcion de la imagen . . . .';
    while (ul.firstChild) {
        ul.removeChild(ul.firstChild);
    }
});

botonAnalisis.addEventListener('click',() => {
    let img = imgUrlAnalisis.value;
    getAnalisis(img);
});


function getAnalisis(img) {
    const key = '45256b4902f24462948fda7582f21d05';
    const endpoint = 'https://service.cognitiveservices.azure.com/';
    const headers = {
        "Ocp-Apim-Subscription-Key": key,
        "Content-Type": "application/json"
    };
    const body = JSON.stringify({ url: img });
    fetch(`${endpoint}vision/v3.2/analyze?visualFeatures=Categories,Description,Objects`,{
        method : 'POST',
        headers : headers,
        body : body
    })
    .then(resultado => resultado.json())
    .then( response => {        
        (async () => {
            console.log(response);
            let textoDescription = response.description.captions[0].text;
            const descripcionTraslator = await traslator(en,es,textoDescription);
            description.textContent = descripcionTraslator;
            
            let items = response.description.tags;
            items.forEach(async element => {
                const li = document.createElement("li");
                
                // Traducir el texto del elemento antes de asignarlo al <li>
                const translatedText = await traslator(en,es,element);
                li.textContent = translatedText;
                
                li.classList.add("list-group-item");
                ul.appendChild(li);
            });
        })();
    })
    .catch( err => console.error(err));  
}

//logica para el chat bot
const chatBox = document.getElementById('chat-box');
const messageInput = document.getElementById('message-input');
const sendButton = document.getElementById('send-button');
sendButton.addEventListener('click', sendMessage);
function sendMessage() {
    const userMessage = messageInput.value;
    if (userMessage.trim() !== '') {
        displayMessage('Tú: ' + userMessage, 'user');
        getBotResponse(userMessage);
        messageInput.value = '';
    }
}

function displayMessage(message, sender) {
    const messageElement = document.createElement('div');
    messageElement.className = sender === 'user' ? 'alert alert-primary mb-2' : 'alert alert-warning mb-2';
    messageElement.textContent = message;
    chatBox.appendChild(messageElement);
    chatBox.scrollTop = chatBox.scrollHeight;
}

async function getBotResponse(userMessage) {
    console.log(userMessage);
    data = {
        "top":1,
        "question": " "+userMessage+" ",
        "includeUnstructuredSources": true,
        "confidenceScoreThreshold": 0,
        "answerSpanRequest": {
            "enable": true,
            "topAnswersWithSpan": 0,
            "confidenceScoreThreshold": 1
        },
        "filters": {
            "metadataFilter":{
                "logicalOperation": "AND"
            }
        }
    }

    url = "https://chat-bot-v1.cognitiveservices.azure.com/language/:query-knowledgebases?projectName=chat-bot-v1&api-version=2021-10-01&deploymentName=production"
    fetch(url,{
        method: 'POST',
        headers: {
            "Ocp-Apim-Subscription-Key": "4ef77b5607554d15ab48f373dd444b6f",
            "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
        
    })
    .then(response => response.json())
    .then(data =>{
        console.log(data.answers[0].answer);
        const botResponse = data.answers[0].answer;
        displayMessage('Bot: ' + botResponse, 'bot');

    })
    .catch(error => {
        console.error("Error:", error);
    });
}

    ------------------------- analisis de texto ----------------------------------------------
const boton = document.getElementById('iniciar');
const imgUrl = document.getElementById('url');
const file = document.getElementById('file');

boton.addEventListener('click',async () => {
    let img = imgUrl.value;
    getAnalisis(img);
    getAnalityLanguage(img);
});

async function getAnalisis(img) {
    const key = '45256b4902f24462948fda7582f21d05';
    const endpoint = 'https://service.cognitiveservices.azure.com/';

    const headers = {
        "Ocp-Apim-Subscription-Key" : key,
        "Content-Type" : "application/json"
    };

    const texto = await descargarContenidoDesdeURL(img);
    const data = {documents: [{id: "1",text: texto}]};
    //sentiment
    //keyPhrases
    //languages
    //entities/linking
    fetch(`${endpoint}text/analytics/v3.1/sentiment`, {
        method: "POST",
        headers: headers,
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        console.log("Sentimiento detectado:");
        console.log("positive: "+result.documents[0].confidenceScores.positive);
        console.log("neutral: "+result.documents[0].confidenceScores.neutral);
        console.log("negative: "+result.documents[0].confidenceScores.negative);
        console.log(result.documents[0].sentiment);
    })
    .catch(error => {
        console.error("Error al detectar el lenguaje:", error);
    });
}

async function getAnalityLanguage(img) {
    const key = '45256b4902f24462948fda7582f21d05';
    const endpoint = 'https://service.cognitiveservices.azure.com/';

    const headers = {
        "Ocp-Apim-Subscription-Key" : key,
        "Content-Type" : "application/json"
    };

    const texto = await descargarContenidoDesdeURL(img);
    const data = {documents: [{id: "1",text: texto}]};

    //sentiment
    //keyPhrases
    //languages
    //entities/linking

    fetch(`${endpoint}text/analytics/v3.1/languages`, {
        method: "POST",
        headers: headers,
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(result => {
        console.log("Lenguaje detectado:");
        const detectedLanguage = result.documents[0].detectedLanguage;
        const langName = detectedLanguage.name;
        const langCode = detectedLanguage.iso6391Name;
        const langScore = detectedLanguage.confidenceScore;

        console.log("Nombre del lenguaje:", langName);
        console.log("Código del lenguaje:", langCode);
        console.log("Puntuación de confianza:", langScore);
    })
    .catch(error => {
        console.error("Error al detectar el lenguaje:", error);
    });
}


async function descargarContenidoDesdeURL(endpoint){
    try {
        const response = await fetch(endpoint);
        const data = await response.text();
        return data;
    } catch (error) {
        console.error("Ocurrio un error: "+error);
    }
}

//Cargar un arhivo txt del computador
document.getElementById('leerArchivo').addEventListener('click',async function () {
    const archivoInput = document.getElementById('archivoInput');
    const contenidoArchivo = document.getElementById('contenidoArchivo');

    const archivo = archivoInput.files[0]; // Obtener el primer archivo seleccionado

    if (archivo) {
        const lector = new FileReader();

        lector.onload = function (e) {
            // El contenido del archivo se encuentra en e.target.result
            contenidoArchivo.textContent = e.target.result;
            getAnalityLanguage(e.target.result);
            getAnalisis(e.target.result);
            // console.log(e.target.result);
        };

        // Leer el archivo como texto
        lector.readAsText(archivo);
    } else {
        contenidoArchivo.textContent = 'No se ha seleccionado ningún archivo.';
    }
});	
  ------------------------------------- traductor ----------------------------------------------
let texto = document.getElementById('texto');
let resultado = document.getElementById('resultado');
let idioma = document.getElementById('idioma');
let limpiar = document.getElementById('limpiar');

limpiar.addEventListener('click',() =>{
    resultado.textContent = '';
    texto.value = '';
});

texto.addEventListener("input",() => {
    let textarea = texto.value;
    if (textarea != '') {        
        traslator(textarea,idioma.value);
    }
});

idioma.addEventListener('click',() => {
    traslator(texto.value,idioma.value);
});

async function traslator(texto,idioma) {
    const headers = {
        "Ocp-Apim-Subscription-Key":"68ecc8fdd30345b1a63e6e9304d3a31f",
        "Ocp-Apim-Subscription-Region":"eastus",
        "Content-Type":"application/json"
    }

    const endpoint = "https://api.cognitive.microsofttranslator.com/";

    const body = JSON.stringify([{'text':texto}]);

    fetch(`${endpoint}translate?api-version=3.0&from=es&to=${idioma}`,{
        method:"POST",
        headers:headers,
        body:body
    })
    .then(respuesta => respuesta.json())
    .then(data => {
        console.log(data[0].translations[0].text);
        resultado.textContent = data[0].translations[0].text;
    })

}

----------------------------- ORC ------------------------------------------------------------------

<!DOCTYPE html>
<html>
<head>
    <title>OCR Sample</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
</head>
<body>

<script type="text/javascript">
    function processImage() {
        // **********************************************
        // *** Update or verify the following values. ***
        // **********************************************

        var key = document.getElementById("key").value;
        var endpoint = document.getElementById("endpointUrl").value;
        
        var uriBase = endpoint + "vision/v3.1/ocr";

        // Request parameters.
        var params = {
            "language": "unk",
            "detectOrientation": "true",
        };

        // Display the image.
        var sourceImageUrl = document.getElementById("inputImage").value;
        document.querySelector("#sourceImage").src = sourceImageUrl;

        // Perform the REST API call.
        $.ajax({
            url: uriBase + "?" + $.param(params),

            // Request headers.
            beforeSend: function(jqXHR){
                jqXHR.setRequestHeader("Content-Type","application/json");
                jqXHR.setRequestHeader("Ocp-Apim-Subscription-Key", key);
            },

            type: "POST",

            // Request body.
            data: '{"url": ' + '"' + sourceImageUrl + '"}',
        })

        .done(function(data) {
            // Show formatted JSON on webpage.
            $("#responseTextArea").val(JSON.stringify(data, null, 2));
        })

        .fail(function(jqXHR, textStatus, errorThrown) {
            // Display error message.
            var errorString = (errorThrown === "") ?
                "Error. " : errorThrown + " (" + jqXHR.status + "): ";
            errorString += (jqXHR.responseText === "") ? "" :
                (jQuery.parseJSON(jqXHR.responseText).message) ?
                    jQuery.parseJSON(jqXHR.responseText).message :
                    jQuery.parseJSON(jqXHR.responseText).error.message;
            alert(errorString);
        });
    };
</script>

<h1>Optical Character Recognition (OCR):</h1>
Enter the URL to an image of printed text, then
click the <strong>Read image</strong> button.
<br><br>
key: 
<input type="text" name="key" id="key"
    value="" /> 
Endpoint URL:
<input type="text" name="endpointUrl" id="endpointUrl"
    value="" />
<br><br>
Image to read:
<input type="text" name="inputImage" id="inputImage" 
    value="https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Atomist_quote_from_Democritus.png/338px-Atomist_quote_from_Democritus.png" />
<button onclick="processImage()">Read image</button>
<br><br>
<div id="wrapper" style="width:1020px; display:table;">
    <div id="jsonOutput" style="width:600px; display:table-cell;">
        Response:
        <br><br>
        <textarea id="responseTextArea" class="UIInput"
                  style="width:580px; height:400px;"></textarea>
    </div>
    <div id="imageDiv" style="width:420px; display:table-cell;">
        Source image:
        <br><br>
        <img id="sourceImage" width="400" />
    </div>
</div>
</body>
</html>

---------------------------jefry ----------------------------------------------------
fetch("https://mineria-datos-cafe.search.windows.net/indexes/indice-cafe/docs?api-version=2023-07-01-Preview&search=", {
  method: "GET",
  headers: {
    "Content-Type": "application/json",
    "api-key": apiKey
  },
})

from fastapi import FastAPI, HTTPException,Form, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from prediction import getPrediction
import json

app = FastAPI()

app.mount("/static", StaticFiles(directory="public/assets"), name="static")
template = Jinja2Templates(directory='templates')

@app.get("/", response_class=HTMLResponse)
def inicio(request: Request):
    return template.TemplateResponse("index.html", {"request": request})



@app.post("/getPrediction", response_class=HTMLResponse)
def get_prediction(request: Request,make: str = Form(...),fuel_type: str = Form(...),aspiration:str = Form(...),num_of_doors: str = Form(...),body_style: str = Form(...),drive_wheels: str = Form(...),engine_location: str = Form(...),wheel_base: float = Form(...),length: float = Form(...),width: float = Form(...),height:float = Form(...),curb_weight: int = Form(...),engine_type: str = Form(...),num_of_cylinders: str = Form(...),engine_size: int = Form(...),fuel_system: str = Form(...),bore: float = Form(...),stroke: float = Form(...),compression_ratio: int = Form(...),horsepower: int = Form(...),peak_rpm: int = Form(...),city_mpg: int = Form(...),highway_mpg: int = Form(...)):
    # Llama a la función getPrediction con los datos recibidos
    prediction = getPrediction(make, fuel_type, aspiration,num_of_doors, body_style, drive_wheels, engine_location, wheel_base, length, width, height,curb_weight, engine_type, num_of_cylinders, engine_size, fuel_system, bore, stroke, compression_ratio, horsepower, peak_rpm, city_mpg, highway_mpg)

    # Intenta convertir la cadena en un diccionario
    try:
        prediction_dict = json.loads(prediction)
    except json.JSONDecodeError as e:
        raise ValueError("El resultado de getPrediction no es un JSON válido.") from e
    
    # Asegúrate de que prediction_dict es un diccionario Python
    if not isinstance(prediction_dict, dict):
        raise ValueError("La función getPrediction debe devolver un diccionario.")
    
    # FastAPI convertirá automáticamente el diccionario en una respuesta JSON
    print(prediction_dict)
    return template.TemplateResponse("index.html", {"request": request, "json_auto": prediction_dict})




import requests

url = 'https://api.example.com/data'
headers = {
    'Authorization': 'Bearer tu_token_de_acceso',  # Reemplaza con tu token de acceso
    'User-Agent': 'MiApp/1.0'  # Opcional: Puedes especificar un User-Agent personalizado
}

response = requests.get(url, headers=headers)

if response.status_code == 200:
    data = response.json()
    print(data)
else:
    print(f'Error {response.status_code}: No se pudo obtener la información.')



import requests
import json

url = 'https://api.example.com/endpoint'
data = {
    'nombre': 'Ejemplo',
    'edad': 30
}
headers = {
    'Content-Type': 'application/json',  # Especificamos que estamos enviando JSON
    'Authorization': 'Bearer tu_token_de_acceso',  # Reemplaza con tu token de acceso si es necesario
    'User-Agent': 'MiApp/1.0'
}

response = requests.post(url, data=json.dumps(data), headers=headers)

if response.status_code == 200:
    print('Datos enviados correctamente.')
else:
    print(f'Error {response.status_code}: No se pudieron enviar los datos.')


let user_input = document.getElementById("user_input")
let boton_bot = document.getElementById("boton_bot")
let chat = document.getElementById("chat")
let cartas_registros = document.getElementById("cartas_registros")
let boton_modal_bot = document.getElementById("boton_modal_bot")
let boton_microfono = document.getElementById("boton_microfono")
let texto_de_voz = ""
idioma_detectado = "es"
texto_labels = "Nombre Usuario--Telefono Usuario--Precio telefono--Marca telefono--Correo electronico"
// traerRegistros()
let formular_pregunta_saludo = ""
let marca = " "
let intencion = ""
let precio = " "
let nombreUsuario = ""
let precio_texto = ""
let marca_texto = ""



boton_modal_bot.addEventListener('click', ()=>{
    let label_saludo = document.createElement('label')
    label_saludo.classList.add("alert", "alert-primary")
    label_saludo.textContent = "Bienvenido soy el bot charlitos compro y vendo celulares"
    chat.append(label_saludo)
    document.addEventListener("keyup", function(event) {  
        if (event.code === 'Enter') {
            if(user_input.value != null && user_input.value != ""){
                traducir(user_input.value,"entidad") 
            }
              
        }
    });
})

boton_bot.addEventListener("click",()=>{
    if(user_input.value != null && user_input.value != ""){
        traducir(user_input.value,"entidad") 
    } 
})


function peticionDeIntenciones(texto_intencio_detectar) {
    let data_intenciones = {
        "kind":"Conversation",
        "analysisInput":{
            "conversationItem":{
                "id":"1",
                "text": texto_intencio_detectar,
                "modality":"text",
                "language":"en",
                "participantId":"1"
            }
        },
        "parameters":{
            "projectName":"lunaluis",
            "verbose":true,
            "deploymentName":"lunadeploy",
            "stringIndexType":"TextElement_V8"
        }
    }
    if(user_input.value != null && user_input.value != ""){
        let label_chat_usuario = document.createElement("div");
        label_chat_usuario.classList.add("alert", "alert-warning")
        label_chat_usuario.textContent = user_input.value
        chat.append(label_chat_usuario)
    }else if(texto_de_voz != ""){
        let label_chat_usuario = document.createElement("div");
        label_chat_usuario.classList.add("alert", "alert-warning")
        label_chat_usuario.textContent = texto_de_voz
        chat.append(label_chat_usuario)
    }
 
    url = "https://bot-celulares.cognitiveservices.azure.com/language/:analyze-conversations?api-version=2022-10-01-preview"
    user_input.value = ""
    fetch(url,{
        method: "POST",
        headers: {
            "Ocp-Apim-Subscription-Key": "0f2504649e384ee1a5adebdc5fde163a",
            "Apim-Request-Id": "4ffcac1c-b2fc-48ba-bd6d-b69d9942995a",
            "Content-Type": "application/json"
        },
        body: JSON.stringify(data_intenciones)
    })
    .then(respuesta => respuesta.json())
    .then(data_intenciones => {
        let formular_pregunta = ""
        console.log(data_intenciones);
        intencion = data_intenciones.result.prediction.topIntent
        console.log(intencion);
        
        data_intenciones.result.prediction.entities.forEach(element => {
            if(element.category == "Saludo"){
                formular_pregunta_saludo = "Saludo"
                if (element.text == "buenos dias") {
                    formular_pregunta_saludo += " buenos dias"
                }else if(element.text == "Buenas tardes"){
                    formular_pregunta_saludo += " Buenas tardes"
                }else if(element.text == "hola"){
                    formular_pregunta_saludo += " hola"
                }
                console.log(formular_pregunta_saludo);
                peticionPreguntasrespuestas(formular_pregunta_saludo)
            }
            if(element.category == "Telefono"){
                marca += element.category
                marca_texto = element.text
            }
            if(element.category == "Precio"){
                precio += element.category
                precio_texto = element.text
            }
            if(element.category == "NombreUsuario"){
                nombreUsuario = element.text
            }
            
            formular_pregunta = intencion+marca+precio
            console.log(formular_pregunta);
        });
        if(formular_pregunta_saludo != ""){
            setTimeout(() => {
                peticionPreguntasrespuestas(formular_pregunta)
            }, 3500);
        }else{
            peticionPreguntasrespuestas(formular_pregunta)
        }
         
    })
    .catch(error => {
        console.log(error);
    })    
}


function peticionPreguntasrespuestas(pregunta) {
    let data_preguntas_respuestas = {
        "top":3,
        "question":pregunta,
        "includeUnstructuredSources":true,
        "confidenceScoreThreshold":"0.8",
        "answerSpanRequest":{
            "enable":false,
        "topAnswersWithSpan":1,
        "confidenceScoreThreshold":"0.8"
        },
        "filters":{
            "metadataFilter":{
            "logicalOperation":"AND",
            }
        }
    }

    url = "https://bot-celulares.cognitiveservices.azure.com/language/:query-knowledgebases?projectName=lunarespuestas&api-version=2021-10-01&deploymentName=test"
    fetch(url,{
        method: "POST",
        headers: {
            "Ocp-Apim-Subscription-Key": "0f2504649e384ee1a5adebdc5fde163a",
            "Content-Type": "application/json"
        },
        body: JSON.stringify(data_preguntas_respuestas)
    })
    .then(respuesta => respuesta.json())
    .then(data_preguntas_respuestas => {
        console.log(data_preguntas_respuestas.answers[0].answer); 
        traducir(data_preguntas_respuestas.answers[0].answer,"respuesta") 
    })
    .catch(error => {
        console.log(error);
    })    
}

function crearRegistros(nombre_usuario,telefono,correo,precio,marca) {
    data = {
        "nombre_usuario": nombre_usuario,
        "telefono": telefono,
        "correo": correo,
        "precio": parseInt(precio),
        "marca": marca
    }

    fetch("http://127.0.0.1:8000/",{
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
    })
    .then(respuesta => respuesta.json())
    .then(data =>{
        console.log(data);
    })
    .catch(error =>{
        console.log(error);
    })
}


function traerRegistros() {
    fetch("http://127.0.0.1:8000/usuarios"
    )
    .then(respuesta => respuesta.json())
    .then(data =>{
        console.log(data.registros);
        let htmlCartasString = ""
        data.registros.forEach(element => {
            htmlCartasString += `<div class="col-lg-4">
                                    <div class="bg-light rounded">
                                        <div class="border-bottom p-4 mb-4">
                                            <h4 class="text-primary-gradient mb-1">Registro ID: ${element[0]}</h4>
                                            <span>Powerful & Awesome Features</span>
                                        </div>
                                        <div class="p-4 pt-0">
                                            <h1 class="mb-3">
                                                <small class="align-top" style="font-size: 22px; line-height: 45px;">$</small>14.99<small
                                                    class="align-bottom" style="font-size: 16px; line-height: 40px;">/ Month</small>
                                            </h1>
                                            <div class="d-flex justify-content-between mb-3"><span>${element[1]}</span><i class="fa fa-check text-primary-gradient pt-1"></i></div>
                                            <div class="d-flex justify-content-between mb-3"><span>${element[2]}</span><i class="fa fa-check text-primary-gradient pt-1"></i></div>
                                            <div class="d-flex justify-content-between mb-3"><span>${element[3]}</span><i class="fa fa-check text-primary-gradient pt-1"></i></div>
                                            <div class="d-flex justify-content-between mb-2"><span>${element[4]}</span><i class="fa fa-check text-primary-gradient pt-1"></i></div>
                                            <div class="d-flex justify-content-between mb-2"><span>${element[5]}</span><i class="fa fa-check text-primary-gradient pt-1"></i></div>
                                            <a href="" class="btn btn-primary-gradient rounded-pill py-2 px-4 mt-4">Get Started</a>
                                        </div>
                                    </div>
                                </div>`
        });
        cartas_registros.innerHTML = htmlCartasString
    })
    .catch(error =>{
        console.log(error);
    })

}

function hablar(texto_hablar, idioma_hablar) {
    const apiUrl = 'https://eastus.tts.speech.microsoft.com/cognitiveservices/v1'; // Reemplaza con la URL correcta
    const subscriptionKey = '64bd01cdd7d94e569857f92701fd3a38'; // Reemplaza con tu clave de suscripción

    const headers = new Headers();
    headers.append('Ocp-Apim-Subscription-Key', subscriptionKey);
    headers.append('Content-Type', 'application/ssml+xml');
    headers.append('X-Microsoft-OutputFormat', 'audio-16khz-128kbitrate-mono-mp3');
    headers.append('User-Agent', 'curl');

    const ssml = "<speak version='1.0' xml:lang='en-US'><voice xml:lang='es-CO' xml:gender='Female' name='es-CO-SalomeNeural'>"+texto_hablar+"</voice></speak>";

    fetch(apiUrl, {
        method: 'POST',
        headers: headers,
        body: ssml,
    })
    .then((response) => {
        if (response.ok) {
            return response.blob();
        } else {
            throw new Error('Error en la solicitud a la API.');
        }
    })
    .then((blob) => {
        const url = URL.createObjectURL(blob);

        // Crea un nuevo elemento de audio
        const audio = new Audio(url);
    
        // Reproduce automáticamente el audio
        audio.play();
        texto_de_voz=""
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}
function traducir(texto_traducir,accion) {
    
    fetch("https://api.cognitive.microsofttranslator.com/translate?api-version=3.0&to="+((accion=="entidad") ? "es": idioma_detectado),{
        method: "POST",
        headers: {
            "Ocp-Apim-Subscription-Key": "8f42c7167e9c40d2913ca997ea4b4cb8",
            "Ocp-Apim-Subscription-Region": "eastus",
            "Content-Type": "application/json"
            
        },
        body: JSON.stringify([{'text': texto_traducir}]) 
    })
    .then(respuesta => respuesta.json())
    .then(data =>{
        console.log(data);
        if(accion == "entidad"){
            idioma_detectado = data[0].detectedLanguage.language
            console.log(idioma_detectado);
            peticionDeIntenciones(data[0].translations[0].text);
        }else if(accion == "respuesta"){
            let label_chat = document.createElement("div");
            label_chat.classList.add("alert", "alert-primary")
            if(formular_pregunta_saludo != ""){
                label_chat.textContent = data[0].translations[0].text+" "+nombreUsuario
                hablar(textContent = data[0].translations[0].text+" "+nombreUsuario, idioma_detectado)
                formular_pregunta_saludo = ""
            }else{
                label_chat.textContent = data[0].translations[0].text
                hablar(textContent = data[0].translations[0].text, idioma_detectado)
            }
            chat.append(label_chat)
            
            console.log(intencion+"--"+marca+"--"+precio);
            if(intencion != "" && precio != " " && marca != " "){
                traducir(texto_labels, "formulario")
            }
        }else if(accion == "formulario"){
            console.log(data[0].translations[0].text);
            arreglo_palabras_label = data[0].translations[0].text.split('--'); 
            console.log(arreglo_palabras_label);
            let form_guardar_registro = document.createElement('form')
            form_guardar_registro.classList.add("alert", "alert-primary")
            let label_nombre = document.createElement("label")
            label_nombre.textContent =  arreglo_palabras_label[0]+" :"
            let input_nombre = document.createElement("input")
            input_nombre.setAttribute("id", "input_nombre")
            input_nombre.setAttribute("value", nombreUsuario)
            let label_telefono = document.createElement("label")
            label_telefono.textContent =  arreglo_palabras_label[1]+" :"
            let input_telefono = document.createElement("input")
            input_telefono.setAttribute("id", "input_telefono")
            let label_precio = document.createElement("label")
            label_precio.textContent =  arreglo_palabras_label[2]+" :"
            let input_precio = document.createElement("input")
            input_precio.setAttribute("id", "input_precio")
            input_precio.setAttribute("value", precio_texto)
            let label_marca = document.createElement("label")
            label_marca.textContent =  arreglo_palabras_label[3]+" :"
            let input_marca = document.createElement("input")
            input_marca.setAttribute("id", "input_marca")
            input_marca.setAttribute("value", marca_texto)
            let label_correo = document.createElement("label")
            label_correo.textContent =  arreglo_palabras_label[4]+" :"
            let input_correo = document.createElement("input")
            input_correo.setAttribute("id", "input_correo")
            let boton_sutmit = document.createElement("button")
            boton_sutmit.classList.add("btn", "btn-primary","m-1")
            boton_sutmit.setAttribute("id", "boton_sutmit")
            boton_sutmit.textContent = "Enviar"
            let br = []
            for (let index = 0; index < 11; index++) {
                br[index]= document.createElement("br")
            }
            
            form_guardar_registro.append(label_nombre)
            form_guardar_registro.append(br[0])
            form_guardar_registro.append(input_nombre)
            form_guardar_registro.append(br[1])
            form_guardar_registro.append(label_telefono)
            form_guardar_registro.append(br[2])
            form_guardar_registro.append(input_telefono)
            form_guardar_registro.append(br[3])
            form_guardar_registro.append(label_precio)
            form_guardar_registro.append(br[4])
            form_guardar_registro.append(input_precio)
            form_guardar_registro.append(br[5])
            form_guardar_registro.append(label_marca)
            form_guardar_registro.append(br[6])
            form_guardar_registro.append(input_marca)
            form_guardar_registro.append(br[7])
            form_guardar_registro.append(label_correo)
            form_guardar_registro.append(br[8])
            form_guardar_registro.append(input_correo)
            form_guardar_registro.append(br[9])
            form_guardar_registro.append(boton_sutmit)
            form_guardar_registro.append(br[10])
            chat.append(form_guardar_registro)
            boton_sutmit.addEventListener("click",()=>{
                crearRegistros(input_nombre.value,input_telefono.value,input_correo.value,input_precio.value,input_marca.value)
            })
        }
    })
    .catch(error => {
        console.log(error);
    })
}





let audioContext = null;
let recognizer = null;

// Función para iniciar el AudioContext después de una interacción del usuario
function iniciarAudioContext() {
    // Verificar si el contexto ya está creado para evitar errores
    if (audioContext === null) {
        // Crear el contexto de audio
        audioContext = new (window.AudioContext || window.webkitAudioContext)();

        // Configuración de reconocimiento de voz
        const speechConfig = SpeechSDK.SpeechConfig.fromSubscription("64bd01cdd7d94e569857f92701fd3a38", "eastus");

        // Configura el idioma deseado (por ejemplo, español)
        speechConfig.speechRecognitionLanguage = "es-ES"; // Cambia a tu idioma deseado

        const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();

        // Crear el reconocedor de voz
        recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);
        

        recognizer.recognized = (s, e) => {
            if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech) {
                console.log(e.result.text);
                texto_de_voz = e.result.text
                traducir(texto_de_voz,"entidad") 
            }
        };

        recognizer.canceled = (s, e) => {
            console.log(`CANCELED: Reason=${e.reason}`);

            if (e.reason === SpeechSDK.CancellationReason.Error) {
                console.log(`CANCELED: ErrorCode=${e.ErrorCode}`);
                console.log(`CANCELED: ErrorDetails=${e.ErrorDetails}`);
            }
        };
    }
}

// Agregar un evento de clic al botón para iniciar el reconocimiento
document.getElementById('boton_microfono_star').addEventListener('click', () => {
    iniciarAudioContext();

    // Ocultar el botón de inicio y mostrar el botón de detener
    document.getElementById('boton_microfono_star').style.display = 'none';
    document.getElementById('boton_microfono_end').style.display = 'block';

    // Iniciar el reconocimiento de voz continuo
    recognizer.startContinuousRecognitionAsync();
});

// Agregar un evento de clic al botón para detener el reconocimiento
document.getElementById('boton_microfono_end').addEventListener('click', () => {
    // Detener el reconocimiento de voz
    recognizer.stopContinuousRecognitionAsync();

    // Ocultar el botón de detener y mostrar el botón de inicio
    document.getElementById('boton_microfono_end').style.display = 'none';
    document.getElementById('boton_microfono_star').style.display = 'block';
});

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from base_datos import crear_registro, leer_registros
from pydantic import BaseModel
import uvicorn

class Registro(BaseModel):
    nombre_usuario: str
    telefono: str
    correo: str
    precio: int
    marca: str

app = FastAPI()

class Registro(BaseModel):
    nombre_usuario: str
    telefono: str
    correo: str
    precio: int
    marca: str

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.post("/")
def index(registro_js: Registro):
    crear_registro(registro_js.nombre_usuario,registro_js.telefono,registro_js.correo,registro_js.precio,registro_js.marca)
    return {"registros": "exitoso"}


@app.get("/usuarios")
def usuarios():
    registros = leer_registros()
    return {"registros": registros}

# if __name__ == '__main__':
#     uvicorn.run('main:app', host='0.0.0.0', port=8000)



import mysql.connector

db = mysql.connector.connect(
    host = "localhost",
    user = "root",
    password = "",
    database = "casa_inteligente"
)

cursor = db.cursor()

def getInfo():
    query = "SELECT * FROM casa"
    cursor.execute(query)
    datos = cursor.fetchall()
    db.commit()
    return datos

def insertUser(nombres, apellidos):
    query = "INSERT INTO usuarios (nombres, apellidos) values (%s,%s)"
    values = (nombres, apellidos)
    cursor.excute(query, values)
    respuesta = db.commit()
    print(respuesta)


def getInfoCasa(id, ubicacion):
    query = "SELECT {} FROM casa WHERE casa.id = %s".format(ubicacion)
    cursor.execute(query, (id,))
    datos = cursor.fetchone()
    db.commit()
    return datos


def updateInfo(id, ubicacion):
    datos = getInfoCasa(id,ubicacion)
    estado = None
    if datos[0]: 
        estado = 0
        query = "UPDATE casa set {} = 0 WHERE casa.id = %s".format(ubicacion)

    else:    
        estado = 1
        query = "UPDATE casa set {} = 1 WHERE casa.id = %s".format(ubicacion)

    cursor.execute(query, (id,))
    db.commit()
    return estado

def apagarLuces(id):
    query = "UPDATE casa set cocina = 0, patio = 0, oficina = 0, sala = 0 WHERE casa.id = %s"
    cursor.execute(query, (id,))
    db.commit()
    return True

def encenderLuces(id):
    query = "UPDATE casa set cocina = 1, patio = 1, oficina = 1, sala = 1 WHERE casa.id = %s"
    cursor.execute(query, (id,))
    db.commit()
    return True






let cocina = document.getElementById("cocina")
let sala = document.getElementById("sala")
let patio = document.getElementById("patio")
let oficina = document.getElementById("oficina")
let img_mic = document.getElementById("img_mic")
let boton_fondo = document.getElementById("boton_fondo")
let microfono_activo = false
let body = document.querySelector('body')
oficina.style.backgroundColor = "yellow"
oficina.style.backgroundColor = ""

let info_casa = []

boton_fondo.addEventListener("click", ()=>{
    body.classList.toggle("bg-dark")
    body.classList.toggle("text-white")
})

function updateLuz(id_casa, ubi, mensaje) {
    data = {
        id: id_casa,
        ubicacion: ubi
    }

    fetch("http://127.0.0.1:8000/update-casa/", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify(data) 
    })
    .then(res => res.json())
    .then(data => {
        hablar(mensaje)
        getCasas()
    })
    .catch(error =>{
        console.log(error);
    })
}

function validar_luz(arreglo_entidades, estado) {
    let query = ""
    let mensaje = ""
    for (const element of arreglo_entidades) {
        if (element.category == "Ubicacion") {
            if (element.text == "patio") {
                if (info_casa[0][2] == estado) {
                    hablar(mensaje += ((estado == 1) ? "luz del patio ya esta encendida" : "luz del patio ya esta apagada"));
                } else {
                    mensaje += ((estado == 1) ? "luz del patio encendida" : "luz del patio apagada")
                    query += ((query != "") ? "," : "")+" patio = "+estado
                }
            } else if (element.text == "cocina") {
                if (info_casa[0][1] == estado) {
                    hablar(mensaje += ((estado == 1) ? "la luz de la cocina ya esta encendida" : " la luz de la cocina ya esta apagada"));               
                } else {
                    mensaje += ((estado == 1) ? "luz de la cocina encendida" : "luz de la cocina apagada")
                    query += ((query != "") ? "," : "")+" cocina = "+estado
                }
            } else if (element.text == "sala") {
                if (info_casa[0][4] == estado) {
                    hablar(mensaje += ((estado == 1) ? "la luz de la sala ya esta encendida" : " la luz de la sala ya esta apagada"));               
                } else {
                    mensaje += ((estado == 1) ? "luz de la sala encendida" : "luz de la sala apagada")
                    query += ((query != "") ? "," : "")+" sala = "+estado
                }
            } else if (element.text == "oficina") {
                if (info_casa[0][3] == estado) {
                    hablar(mensaje += ((estado == 1) ? "la luz de la oficina ya esta encendida" : " la luz de la oficina ya esta apagada"));               
                } else {
                    mensaje += ((estado == 1) ? "luz de la oficina encendida" : "luz de la oficina apagada")
                    query += ((query != "") ? "," : "")+" oficina = "+estado
                }
            } else if (element.text == "casa") {
                if (estado == 1) {
                    encenderLuces();
                } else {
                    apagarLuces();
                }
            }

        }
    }
    if(query != ""){
        console.log();
        updateLuz(info_casa[0][0], query,mensaje);
        query=""
    }   
}


function entidadesCasa(text) {
    
    data = {
        "kind":"Conversation",
        "analysisInput":{
            "conversationItem":{
                "id":"1",
                "text": text,
                "modality":"text",
                "language":"es-es",
            "participantId":"1"
            }
        },
        "parameters":{
            "projectName":"casaIteligente",
            "verbose":true,
            "deploymentName":"deploy-casa-inteligente",
            "stringIndexType":"TextElement_V8"
            }
    };

    fetch("https://bot-celulares.cognitiveservices.azure.com/language/:analyze-conversations?api-version=2022-10-01-preview", {
        method: "POST",
        headers: {
            "Ocp-Apim-Subscription-Key": "0f2504649e384ee1a5adebdc5fde163a",
            "Apim-Request-Id": "4ffcac1c-b2fc-48ba-bd6d-b69d9942995a",
            "Content-Type": "application/json"
        },
        body: JSON.stringify(data) 
    })
    .then(res => res.json())
    .then(data => {
        console.log(data);
        console.log(data.result.prediction.topIntent);
        console.log(data.result.prediction.entities);
        if(data.result.prediction.topIntent == "ApagarLuz"){
            validar_luz(data.result.prediction.entities, 0)
        }else if(data.result.prediction.topIntent == "PrenderLuz"){
            validar_luz(data.result.prediction.entities, 1)
        }
    })
    .catch(error =>{
        console.log(error);
    })


}

let audioContext = null;
let recognizer = null;

function iniciarAudioContext() {
    
    if (audioContext === null) {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();


        const speechConfig = SpeechSDK.SpeechConfig.fromSubscription("64bd01cdd7d94e569857f92701fd3a38", "eastus");


        speechConfig.speechRecognitionLanguage = "es-ES";

        const audioConfig = SpeechSDK.AudioConfig.fromDefaultMicrophoneInput();

        recognizer = new SpeechSDK.SpeechRecognizer(speechConfig, audioConfig);
        

        recognizer.recognized = (s, e) => {
            if (e.result.reason === SpeechSDK.ResultReason.RecognizedSpeech) {
                entidadesCasa(e.result.text)
            }
        };

        recognizer.canceled = (s, e) => {
            console.log(`CANCELED: Reason=${e.reason}`);

            if (e.reason === SpeechSDK.CancellationReason.Error) {
                console.log(`CANCELED: ErrorCode=${e.ErrorCode}`);
                console.log(`CANCELED: ErrorDetails=${e.ErrorDetails}`);
            }
        };
    }
}

img_mic.addEventListener("click", ()=>{
    if(microfono_activo){
        recognizer.stopContinuousRecognitionAsync();
        microfono_activo = false
        img_mic.setAttribute("src", "img/icons8-mic-50.png")   
    }else{
        iniciarAudioContext();
        recognizer.startContinuousRecognitionAsync();
        microfono_activo = true
        img_mic.setAttribute("src", "img/icons8-microphone-50.png")
    }

})

function getCasas() {
    fetch("http://127.0.0.1:8000/")
    .then(res => res.json())
    .then(data => {
        info_casa = data
        console.log(info_casa);
        pitar_luz()
    })
    .catch(error =>{
        console.log(error);
    })
}

getCasas()



function hablar(texto_hablar) {
    const apiUrl = 'https://eastus.tts.speech.microsoft.com/cognitiveservices/v1';
    const subscriptionKey = '64bd01cdd7d94e569857f92701fd3a38'; 

    fetch(apiUrl, {
        method: 'POST',
        headers: {
            'Ocp-Apim-Subscription-Key': subscriptionKey,
            'Content-Type': 'application/ssml+xml',
            'X-Microsoft-OutputFormat': 'audio-16khz-128kbitrate-mono-mp3',
            'User-Agent': 'curl'
        },
        body: "<speak version='1.0' xml:lang='en-US'><voice xml:lang='es-ES' xml:gender='Female' name='	es-ES-ElviraNeural'>"+texto_hablar+"</voice></speak>"
    })
    .then((response) => {
        if (response.ok) {
            return response.blob();
        } else {
            throw new Error('Error en la solicitud a la API.');
        }
    })
    .then((blob) => {
        const url = URL.createObjectURL(blob);

        // Crea un nuevo elemento de audio
        const audio = new Audio(url);
    
        // Reproduce automáticamente el audio
        audio.play();
        texto_de_voz=""
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}

function pitar_luz() {
    if(info_casa[0][1] == 1){
        cocina.classList.add("bg-warning")
    }else{
        cocina.classList.remove("bg-warning")
    }

    if(info_casa[0][2] == 1){
        patio.classList.add("bg-warning")
    }else{
        patio.classList.remove("bg-warning")
    }

    if(info_casa[0][3] == 1){
        oficina.classList.add("bg-warning")
    }else{
        oficina.classList.remove("bg-warning")
    }

    if(info_casa[0][4] == 1){
        sala.classList.add("bg-warning")
    }else{
        sala.classList.remove("bg-warning")
    }
}

function apagarLuces() {
    cocina.classList.remove("bg-warning")
    patio.classList.remove("bg-warning")
    oficina.classList.remove("bg-warning")
    sala.classList.remove("bg-warning")
    for (let index = 1; index < info_casa[0].length; index++) {
        info_casa[0][index] = 0
    }
    manejar_luces(1,0, "Todas las luces fueron apagadas")
}

function encenderLuces() {
    cocina.classList.add("bg-warning")
    patio.classList.add("bg-warning")
    oficina.classList.add("bg-warning")
    sala.classList.add("bg-warning")
    for (let index = 1; index < info_casa[0].length; index++) {
        info_casa[0][index] = 1
    }
    manejar_luces(1,1, "Todas las luces fueron encendidas")
}

function manejar_luces(id,estado,mensaje) {
    fetch(`http://127.0.0.1:8000/luces/${id}/${estado}`)
    .then(res => res.json())
    .then(data => {
        console.log(data);
        hablar(mensaje);
    })
    .catch(error =>{
        console.log(error);
    })
}





-------------------------- githubs ----------------------------------------------------

---- JS ----------------------------------------
https://github.com/Azure-Samples/cognitive-services-quickstart-code.git
---------- Windo2s -----------------------------
https://github.com/roman09wS/app-azure.git

------------Fefito ------------------------------
https://github.com/jefryne/botcelulares.git
https://github.com/jefryne/web_placas.git
--------------backend fetito --------------------
https://github.com/jefryne/casa_inteligente.git
------------ ai 900 ----------------------------
 git clone https://github.com/MicrosoftLearning/AI-900-AIFundamentals ai-900

------------- git python&C# --------------------
https://github.com/MicrosoftLearning/AI-102-AIEngineer.git

-------------- cognitive services github ---------------------
https://github.com/Azure-Samples/cognitive-services-speech-sdk.git
